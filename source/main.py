# Imports from external packages
from absl import app
from absl import flags
import re

# Imports of internal packages
from documentation import logger
from information import information as gather
from information.networking import requests

# Pattern to match, in order to check whether input is valid or not.
ipPattern = r'^(https?:[0-9]{1,3}\.){3}[0-9]{1,3}'
webPattern = r'[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)'
httpsPattern = r'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)'

# Setup flags, so the user can set up required arguments
FLAGS = flags.FLAGS
flags.DEFINE_string("target", None, "[Required] The targets IP address. Has to be in the Regex Format of an IP, "
                                    "or it will fail",
                    required=True)
flags.DEFINE_string("logs", "../documentation/results.log", "Location for the result log. You can set a path for it, "
                                                            "or the default will be used.")


# checkFlags checks, whether all the necessary flags are set and will return true or false.
def checkFlags():
    if "localhost" in FLAGS.target:
        print("target defined as: %s!" % FLAGS.target)
        return True
    if FLAGS.target == "":
        print("No target was set, please try again")
        return False
    if not re.match(pattern=ipPattern, string=FLAGS.target) and not re.match(pattern=webPattern, string=FLAGS.target) \
            and not re.match(pattern=httpsPattern, string=FLAGS.target):
        print("The pattern did not match to an IP-Address or URL please try again")
        return False
    print("target defined as: %s!" % FLAGS.target)
    return True


# main is the Main-Function that is the starting point of the program
def main(argv):
    if checkFlags():
        url = FLAGS.target
        logger.log("Initiating logs for testing the website running at %s" % url, "Initiation")
        reachable, information = requests.ping(url)
        if reachable:
            logger.log(information, "Ping Website")
            gather.gather(FLAGS.target)
        else:
            logger.error("Ping Website", information)


if __name__ == "__main__":
    app.run(main)